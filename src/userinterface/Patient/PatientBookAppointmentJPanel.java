/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userinterface.Patient;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Hospital.Appointment;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Role.Doctor;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nidhi Goyal
 */
public class PatientBookAppointmentJPanel extends javax.swing.JPanel {
    private final JPanel userProcessContainer;
    private final EcoSystem system;
    private final Patient patient;
    private ArrayList<Enterprise> hospitalEnt;

    public PatientBookAppointmentJPanel(JPanel container, Patient patient, EcoSystem system) {
        initComponents();
        this.userProcessContainer = container;
        this.patient = patient;
        this.system = system;
        this.hospitalEnt = system.getEnterprise(patient.getLocation(), Enterprise.EnterpriseType.Hospital);
        populateDoctorTable(system.getDoctorsByNetwork(patient.getLocation()));
    }
    
    public void populateDoctorTable(ArrayList<UserAccount> doctorList) {
        System.out.println(patient.getName());
        DefaultTableModel model = (DefaultTableModel) doctorTbl.getModel();
        model.setRowCount(0);
        
        for (Enterprise ent : this.hospitalEnt) {
            System.out.println(ent);
            for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof DoctorOrganization) {
                    for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                        if (ua.getRole().getRoleType() == Role.RoleType.Doctor) {
                            Object[] row = new Object[4];
                            row[0] = patient.getLocation();
                            row[1] = ent;
                            row[2] = ua;
                            row[3] = org;

                            model.addRow(row);
                        }
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorTbl = new javax.swing.JTable();
        bookBtn = new javax.swing.JButton();
        dateLbl = new javax.swing.JLabel();
        problemComboBox = new javax.swing.JComboBox();
        dateChooser = new com.toedter.calendar.JDateChooser();

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Book Appointment");

        doctorTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Network", "Hospital", "Doctor", "Organizaton"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorTbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(doctorTbl);
        if (doctorTbl.getColumnModel().getColumnCount() > 0) {
            doctorTbl.getColumnModel().getColumn(0).setResizable(false);
            doctorTbl.getColumnModel().getColumn(1).setResizable(false);
            doctorTbl.getColumnModel().getColumn(2).setResizable(false);
            doctorTbl.getColumnModel().getColumn(3).setMinWidth(0);
            doctorTbl.getColumnModel().getColumn(3).setPreferredWidth(0);
            doctorTbl.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        bookBtn.setText("Book");
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        dateLbl.setText("Date");

        problemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select a Problem", "Alcohol/Drug Addiction", "Anxiety", "Depression", "Eating Disorder", "Sleep Disorder", "Stress" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(129, 129, 129)
                                .addComponent(problemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateLbl)
                        .addComponent(problemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bookBtn)
                .addGap(73, 73, 73))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        int selectedRow = doctorTbl.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a doctor", "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int selectedReasonRow = problemComboBox.getSelectedIndex();
        if (selectedReasonRow == 0) {
            JOptionPane.showMessageDialog(null, "Select a problem", "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (dateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Select a date", "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        UserAccount account = (UserAccount)doctorTbl.getValueAt(selectedRow, 2);
        DoctorOrganization org = (DoctorOrganization)(doctorTbl.getValueAt(selectedRow, 3));
        
        Appointment appt = new Appointment();
        appt.setDoctor((Doctor)account.getRole());
        appt.setPatient(patient);
        appt.setAppointmentDate(dateChooser.getDate());
        appt.setAppointmentReason((String)problemComboBox.getSelectedItem());
        
        AppointmentWorkRequest apptRequest = new AppointmentWorkRequest(appt);
        apptRequest.setStatus("Pending Confirmation");
        apptRequest.setReceiver(account);
        
        org.getWorkQueue().getWorkRequestList().add(apptRequest);
        
        JOptionPane.showMessageDialog(null, "Your appointment request has been sent successfully", "Info Message", JOptionPane.INFORMATION_MESSAGE);

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        PatientWorkAreaJPanel dwjp = (PatientWorkAreaJPanel) component;
        dwjp.populateAppointmentHistory();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_bookBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton bookBtn;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel dateLbl;
    private javax.swing.JTable doctorTbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox problemComboBox;
    // End of variables declaration//GEN-END:variables
}
